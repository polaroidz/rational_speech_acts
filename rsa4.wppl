const approx = function(x,b) {
  const b = 10
  return b * Math.round(x / b)
}

const utterances = [
  50, 51,
  500, 501,
  1000, 1001,
  5000, 5001,
  10000, 10001
]

const preciseNumberCost = 1
const utteranceCost = function(numberUtt){
  return numberUtt == approx(numberUtt) ? 0 : preciseNumberCost 
}

const utteranceProbs = map(function(numberUtt){
  return Math.exp(-utteranceCost(numberUtt))
}, utterances)

const utterancePrior = function() {
  categorical({ vs: utterances, ps: utteranceProbs })
}

const pricePrior = function () {
  categorical({
    vs: utterances,
    ps: [
      0.4205, 0.3865,
      0.0533, 0.0538,
      0.0223, 0.0211,
      0.0112, 0.0111,
      0.0083, 0.0120
    ]
  })
}

// Supostamente mensurado atraves de testes
// com pessoas
const valencePrior = function(price) {
  const probs = {
    50 : 0.3173,
    51 : 0.3173,
    500 : 0.7920,
    501 : 0.7920,
    1000 : 0.8933,
    1001 : 0.8933,
    5000 : 0.9524,
    5001 : 0.9524,
    10000 : 0.9864,
    10001 : 0.9864
  }
  
  flip(probs[price])
}

const qudPrior = function() {
  categorical({
    vs: ["price", "valence", "priceValence", "approxPrice"],
    ps: [1, 1, 1, 1]
  })
}

const qudFns = {
  price: function(state) {return { price: state.price } },
  valence: function(state) {return { valence: state.valence } },
  priceValence: function(state) {
    return { price: state.price, valence: state.valence }
  },
  approxPrice: function(state) {return { price: approx(state.price) } }
}

// Interpretacao literal da utterance em relacao ao preco
const meaning = function(utterance, price) {
  return utterance == price
}

const literalListener = cache(function (utterance, qud) {
  Infer({model: function () {
    const price = pricePrior()
    const valence = valencePrior(price)
    const qudFn = qudFns[qud]

    condition(meaning(utterance, price))

    return qudFn({price, valence})
  }})
})

const alpha =  1.0

const speaker = function(qudAnswer, qud) {
  Infer({model: function(){
    const utterance = utterancePrior()

    factor(alpha * literalListener(utterance, qud).score(qudAnswer))

    return utterance
  }})
}

const pragmaticListener = function(utterance) {
  Infer({model: function(){
    const price = pricePrior()
    const valence = valencePrior(price)
    const fullState = {price, valence}
    
    const qud = qudPrior()
    const qudFn = qudFns[qud]
    const qudAnswer = qudFn(price, valence)
    
    observe(speaker(qudAnswer, qud), utterance)

    return fullState
  }})
}


pragmaticListener(5000)